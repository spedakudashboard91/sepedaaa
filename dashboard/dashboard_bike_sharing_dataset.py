# -*- coding: utf-8 -*-
"""Dashboard_bike_sharing_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yyf2i1ZcZ0r-7km2oQlbEqtOdG7RZfWE
"""

!pip install streamlit

!pip install pyngrok

!pip install streamlit pandas numpy seaborn matplotlib plotly

# Libraries Used
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from datetime import datetime
import streamlit as st

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')
# Load the data
@st.cache
def load_data():
    day_data = pd.read_csv('/content/drive/MyDrive/Notebook_bike_sharing_dataset/Dashboard/day_dataset.csv')

# Sidebar filters
st.sidebar.image("https://freeimghost.net/i/WhatsApp-Image-2024-12-27-at-10.10.29-PM.cBUGk")
st.sidebar.header("Filter:")
start_date, end_date = st.sidebar.date_input(
    label="Date",
    min_value=day_data["dteday"].min(),
    max_value=day_data["dteday"].max(),
    value=[day_data["dteday"].min(), day_data["dteday"].max()]
)

# Connecting with me
st.sidebar.header("Terhubung dengan saya:")
st.sidebar.markdown("Dora Leonny Giselle")
col1 = st.sidebar
with col1:
    st.markdown("[![LinkedIn]](https://www.linkedin.com/in/dora-leonny-gise-932584275/)")
st.sidebar.markdown("For inquiries and collaborations, feel free to contact me!")
st.sidebar.markdown("---")
st.sidebar.markdown("[Dataset](https://drive.google.com/drive/folders/1abMuFsXxzeTbQerSUf3c_n9UTM4GZzA6?usp=sharing)")

# Filtering data
main_df = day_data[
    (day_data["dteday"] >= str(start_date)) &
    (day_data["dteday"] <= str(end_date))
]

# Main title

st.title("🚲 Bike Sharing Dashboard 🚲!Disini anda akan melihat hasil analisa penyewaan sepeda")
st.markdown("##")

# Metrics
col1, col2, col3 = st.columns(3)

with col1:
    total_all_rides = main_df['cnt'].sum()
    st.metric("Total Rides", value=total_all_rides)

with col2:
    total_casual_rides = main_df['casual'].sum()
    st.metric("Total Casual Rides", value=total_casual_rides)

with col3:
    total_registered_rides = main_df['registered'].sum()
    st.metric("Total Registered Rides", value=total_registered_rides)

st.markdown("---")

# Visualization
with st.container():
    st.write('## 🔄 Distribusi Penyewaan Sepeda pada Hari Kerja dan Hari Libur')
    working_day = main_df[main_df['workingday'] == 1]['cnt']
    holiday = main_df[main_df['holiday'] == 1]['cnt']

    fig, ax = plt.subplots(figsize=(10, 6))
    sns.histplot(working_day, color='blue', kde=True, label='Hari Kerja', ax=ax)
    sns.histplot(holiday, color='black', kde=True, label='Hari Libur', ax=ax)
    ax.set_title("Distribusi Penyewaan Sepeda pada Hari Kerja dan Hari Libur", fontsize=16)
    ax.set_xlabel("Total Penyewaan Sepeda", fontsize=14)
    ax.set_ylabel("Frekuensi", fontsize=14)
    ax.legend()
    st.pyplot(fig)

with st.expander('💡 Penjelasan'):
    st.write("""
    Pada hari kerja, penyewaan sepeda memiliki variasi yang lebih luas, menunjukkan perbedaan aktivitas.
    Di sisi lain, hari libur memiliki penyewaan sepeda yang lebih stabil dan cenderung di sekitar angka yang lebih rendah.
    """)

with st.container():
    st.write('## 🌧️ Pengaruh Kondisi Cuaca terhadap Penggunaan Sepeda')

    fig, ax = plt.subplots(figsize=(12, 6))
    sns.boxplot(x='weathersit', y='cnt', data=main_df, ax=ax, palette="Set2")
    ax.set_title('Pengaruh Kondisi Cuaca terhadap Penggunaan Sepeda', fontsize=16)
    ax.set_xlabel('Kondisi Cuaca', fontsize=12)
    ax.set_ylabel('Total Penggunaan Sepeda', fontsize=14)
    ax.set_xticks([0, 1, 2])
    ax.set_xticklabels(['Cerah', 'Berkabut + Berawan', 'Hujan/Snow Ringan'])
    st.pyplot(fig)

# Plot for working day
fig1 = px.box(day_data, x='workingday', y='cnt', color='workingday',
              title='Bike Rental Clusters by Working Day',
              labels={'workingday': 'Working Day', 'cnt': 'Total Rentals'},
              color_discrete_sequence=['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#FF0000'])
fig1.update_xaxes(title_text='Working Day')
fig1.update_yaxes(title_text='Total Rentals')
st.plotly_chart(fig1, use_container_width=True)

# Plot for holiday
fig2 = px.box(day_data, x='holiday', y='cnt', color='holiday',
              title='Bike Rental Clusters by Holiday',
              labels={'holiday': 'Holiday', 'cnt': 'Total Rentals'},
              color_discrete_sequence=['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#FF0000'])
fig2.update_xaxes(title_text='Holiday')
fig2.update_yaxes(title_text='Total Rentals')
st.plotly_chart(fig2, use_container_width=True)

# Plot for weekday
fig3 = px.box(day_data, x='weekday', y='cnt', color='weekday',
              title='Bike Rental Clusters by Weekday',
              labels={'weekday': 'Weekday', 'cnt': 'Total Rentals'},
              color_discrete_sequence=['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#FF0000'])
fig3.update_xaxes(title_text='Weekday')
fig3.update_yaxes(title_text='Total Rentals')
st.plotly_chart(fig3, use_container_width=True)

# Scatter plot for temperature
fig = px.scatter(day_data, x='temp', y='cnt', color='season',
                 title='Bike Rental Clusters by Season and Temperature',
                 labels={'temp': 'Temperature (°C)', 'cnt': 'Total Rentals'},
                 color_discrete_sequence=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'],
                 hover_name='season')
st.plotly_chart(fig, use_container_width=True)

# Bar plot for seasonal usage
seasonal_usage = day_data.groupby('season')[['registered', 'casual']].sum().reset_index()
fig = px.bar(seasonal_usage, x='season', y=['registered', 'casual'],
             title='Bike Rental Counts by Season',
             labels={'season': 'Season', 'value': 'Total Rentals', 'variable': 'User Type'},
             color_discrete_sequence=["#00FF00","#0000FF"], barmode='group')
st.plotly_chart(fig, use_container_width=True)

st.caption('Copyright (c), created by Dora Leonny Giselle')

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st

# Commented out IPython magic to ensure Python compatibility.
# #Buat script untuk menjalankan Streamlit:
# %%writefile run_streamlit.sh
# streamlit run app.py & npx localtunnel --port 8501

#Jalankan aplikasi
# Sel untuk menjalankan Streamlit
!streamlit run app.py